<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="style.css" rel="stylesheet" type="text/css">
    <link href="responsive.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" href="CSS/style.css"> 
     <link rel="stylesheet" href="CSS/responsive.css"> 
    <title> Be-educate Online Education Platform</title>
    <!-- <script src="https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js"></script> -->
    <!-- <script src="js/resp.js"></script> -->

    <link rel="canonical" href="https://getbootstrap.com/docs/5.2/examples/cover/">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor" crossorigin="anonymous">
    <link rel="apple-touch-icon" href="/docs/5.2/assets/img/favicons/apple-touch-icon.png" sizes="180x180">
    <link rel="icon" href="/docs/5.2/assets/img/favicons/favicon-32x32.png" sizes="32x32" type="image/png">
    <link rel="icon" href="/docs/5.2/assets/img/favicons/favicon-16x16.png" sizes="16x16" type="image/png">
    <link rel="manifest" href="/docs/5.2/assets/img/favicons/manifest.json">
    <link rel="mask-icon" href="/docs/5.2/assets/img/favicons/safari-pinned-tab.svg" color="#712cf9">
    <link rel="icon" href="/docs/5.2/assets/img/favicons/favicon.ico">
    <meta name="theme-color" content="#712cf9">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>




</head>
<body>
    <header>
    <nav class="navbar navbar1 background h-nav-resp"> 
        
        <ul class="nav-list v-class-resp">
            <div class="logo"><img src="https://source.unsplash.com/900x900/?laptop" alt="logo"></div>
            <li><a href="#home">Home</a></li>
            <li><a href="#about">About</a></li>
            <li><a href="#contact">Contact Us</a></li>
        </ul>
        <!-- <img src="img/moon.png" id="icon"> -->
        <div class="rightNav v-class-resp">
            
            <form action="/logout?_method=DELETE" method="POST">

            <button class=" nav-link fw-bold text-white btnn btnn-sm py-1 px-0 p=3" type="submit" name="logout" id="search">Logout</button>
        </form>
        </div>
        <div class="burger">
            <div class="line"></div>
            <div class="line"></div>
            <div class="line"></div>
        </div>
    </nav>
</header>
    <section class="background firstSection" id="home">
        <div class="box-main">
            <div class="firstHalf">
                <p class="text-big">Future of Education</p>
                <p class="text-small">Be-educate is an online course learning app.E-learning and ed-tech companies are the new beginnings that will revolutionise the whole education process. Online learning has become more convenient with the use of advanced science and technology. In this changing world, online classes have become more accessible. Online classes have made our learning process more manageable with our busy schedules. Online classes have been beneficial to students who do not have access to proper schooling and quality education. Ed-tech platforms are now helping students as well as teachers with different study materials, various online courses, etc., at a very reasonable cost so that education can be accessible and available to all grades of students. Online classes help students and teachers excel academically even better than offline classes because they get their own space for learning. They can learn in their own comfort zone. During the pandemic, online classes have been beneficial to the students and their parents to keep the children engaged with their studies.
                    Explore a user-friendly interface, delve into high-quality video lectures, collaborate in real-time, and access a vast library of educational resources. Join the Be-Educate community, connect with experienced educators, and embark on a journey of knowledge discovery. With Be-Educate, education knows no limits - empower yourself today!
                </p>
                <div class="buttons">
                    <!-- <button class="btnn" onclick="window.location.href='file:///C:/Users/Lenovo/Desktop/itproject/form.html';">Apply</button> -->
                    <!-- <a href='https://www.youtube.com/results?search_query=c%2B%2B%2Cjava%2Cdaa+tutorial'><button class="btnn btnn-sm ">Watch Tutorial</button> -->
                    <!-- <button class="btnn btnn-dark" onclick="window.location.href='https://www.youtube.com/results?search_query=c%2B%2B%2Cjava%2Cdaa+tutorial';">Watch tutorial</button> -->
                    <!-- <button class="btnn btnn-dark" onclick="window.open='https://www.youtube.com/results?search_query=c%2B%2B%2Cjava%2Cdaa+tutorial';">Watch tutorial</button> -->
                <!-- </a> -->

                <a href='https://www.youtube.com/results?search_query=c%2B%2B%2Cjava%2Cdaa+tutorial'>
                    <button class="btnn btnn-sm " type="button">Watch Tutorial</button>
                </a>

                </div>
            </div>
            <div class="secondHalf">
                <img src="https://source.unsplash.com/900x900/?laptop" alt="Future Education Image" class="img-resp">
            </div>
        </div>

        

    </section>
    <section class="section" id="about">
        <div class="paras">
        <p class="text-big">C++</p>
        
        <p class="text-small">C++ is one of the world's most popular programming languages.

            C++ can be found in today's operating systems, Graphical User Interfaces, and embedded systems.
            
            C++ is an object-oriented programming language which gives a clear structure to programs and allows code to be reused, lowering development costs.
            
            C++ is portable and can be used to develop applications that can be adapted to multiple platforms.
            
            C++ is fun and easy to learn!
            C++  is a high-level, general-purpose programming language created by Danish computer scientist Bjarne Stroustrup. First released in 1985 as an extension of the C programming language, it has since expanded significantly over time; as of 1997 C++ has object-oriented, generic, and functional features, in addition to facilities for low-level memory manipulation. It is almost always implemented as a compiled language, and many vendors provide C++ compilers, including the Free Software Foundation, LLVM, Microsoft, Intel, Embarcadero, Oracle, and IBM.[13]

C++ was designed with systems programming and embedded, resource-constrained software and large systems in mind, 
with performance, efficiency, and flexibility of use as its design highlights.[14] C++ has also been found useful 
in many other contexts, with key strengths being software infrastructure and resource-constrained applications,[14] 
including desktop applications, video games, servers (e.g. e-commerce, web search, or databases), and 
performance-critical applications (e.g. telephone switches or space probes).
C++ (/ˈsiː plʌs plʌs/, pronounced "C plus plus" and sometimes abbreviated as CPP) is a high-level, general-purpose programming language created by Danish computer scientist Bjarne Stroustrup. First released in 1985 as an extension of the C programming language, it has since expanded significantly over time; as of 1997 C++ has object-oriented, generic, and functional features, in addition to facilities for low-level memory manipulation. It is almost always implemented as a compiled language, and many vendors provide C++ compilers, including the Free Software Foundation, LLVM, Microsoft, Intel, Embarcadero, Oracle, and IBM.[14]

C++ was designed with systems programming and embedded, resource-constrained software and large systems in mind, with performance, efficiency, and flexibility of use as its design highlights.[15] C++ has also been found useful in many other contexts, with key strengths being software infrastructure and resource-constrained applications,[15] including desktop applications, video games, servers (e.g. e-commerce, web search, or databases), and performance-critical applications (e.g. telephone switches or space probes).[16]

C++ is standardized by the International Organization for Standardization (ISO), with the latest standard version ratified and published by ISO in December 2020 as ISO/IEC 14882:2020 (informally known as C++20).[17] The C++ programming language was initially standardized in 1998 as ISO/IEC 14882:1998, which was then amended by the C++03, C++11, C++14, and C++17 standards. The current C++20 standard supersedes these with new features and an enlarged standard library. Before the initial standardization in 1998, C++ was developed by Stroustrup at Bell Labs since 1979 as an extension of the C language; he wanted an efficient and flexible language similar to C that also provided high-level features for program organization.[18] Since 2012, C++ has been on a three-year release schedule[19] with C++23 as the next planned standard.[20]

History

Bjarne Stroustrup, the creator of C++, in his AT&T New Jersey office, c. 2000
In 1979, Bjarne Stroustrup, a Danish computer scientist, began work on "C with Classes", the predecessor to C++.[21] The motivation for creating a new language originated from Stroustrup's experience in programming for his PhD thesis. Stroustrup found that Simula had features that were very helpful for large software development, but the language was too slow for practical use, while BCPL was fast but too low-level to be suitable for large software development. When Stroustrup started working in AT&T Bell Labs, he had the problem of analyzing the UNIX kernel with respect to distributed computing. Remembering his PhD experience, Stroustrup set out to enhance the C language with Simula-like features.[22] C was chosen because it was general-purpose, fast, portable and widely used. As well as C and Simula's influences, other languages also influenced this new language, including ALGOL 68, Ada, CLU and ML.

Initially, Stroustrup's "C with Classes" added features to the C compiler, Cpre, including classes, derived classes, strong typing, inlining and default arguments.[23]


A quiz on C++11 features being given in Paris in 2015
In 1982, Stroustrup started to develop a successor to C with Classes, which he named "C++" (++ being the increment operator in C) after going through several other names. New features were added, including virtual functions, function name and operator overloading, references, constants, type-safe free-store memory allocation (new/delete), improved type checking, and BCPL style single-line comments with two forward slashes (//). Furthermore, Stroustrup developed a new, standalone compiler for C++, Cfront.

In 1984, Stroustrup implemented the first stream input/output library. The idea of providing an output operator rather than a named output function was suggested by Doug McIlroy[2] (who had previously suggested Unix pipes).

In 1985, the first edition of The C++ Programming Language was released, which became the definitive reference for the language, as there was not yet an official standard.[24] The first commercial implementation of C++ was released in October of the same year.[21]

In 1989, C++ 2.0 was released, followed by the updated second edition of The C++ Programming Language in 1991.[25] New features in 2.0 included multiple inheritance, abstract classes, static member functions, const member functions, and protected members. In 1990, The Annotated C++ Reference Manual was published. This work became the basis for the future standard. Later feature additions included templates, exceptions, namespaces, new casts, and a Boolean type.

In 1998, C++98 was released, standardizing the language, and a minor update (C++03) was released in 2003.

After C++98, C++ evolved relatively slowly until, in 2011, the C++11 standard was released, adding numerous new features, enlarging the standard library further, and providing more facilities to C++ programmers. After a minor C++14 update released in December 2014, various new additions were introduced in C++17.[26] After becoming finalized in February 2020,[27] a draft of the C++20 standard was approved on 4 September 2020 and officially published on 15 December 2020.[28][29]

On January 3, 2018, Stroustrup was announced as the 2018 winner of the Charles Stark Draper Prize for Engineering, "for conceptualizing and developing the C++ programming language".[30]


According to Stroustrup, "the name signifies the evolutionary nature of the changes from C".[32] This name is credited to Rick Mascitti (mid-1983)[23] and was first used in December 1983. When Mascitti was questioned informally in 1992 about the naming, he indicated that it was given in a tongue-in-cheek spirit. The name comes from C's ++ operator (which increments the value of a variable) and a common naming convention of using "+" to indicate an enhanced computer program.

During C++'s development period, the language had been referred to as "new C" and "C with Classes"[23][33] before acquiring its final name.
        </p>
    </div>
        <div class="thumbnail">
            <a href="https://www.youtube.com/results?search_query=c%2B%2B+playlist"><img src="https://source.unsplash.com/900x900/?coding,C++language,logo" alt= "c++logo image" class="imgFluid">
            </a>
    </div>
    </section>
    <section class="section section-left">
        <div class="paras">
        <p class="text-big">Java</p>
        
        <p class="text-small">Java is a high-level, class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible. It is a general-purpose programming language intended to let programmers write once, run anywhere (WORA),[16] meaning that compiled Java code can run on all platforms that support Java without the need to recompile.[17] Java applications are typically compiled to bytecode that can run on any Java virtual machine (JVM) regardless of the underlying computer architecture. The syntax of Java is similar to C and C++, but has fewer low-level facilities than either of them. The Java runtime provides dynamic capabilities (such as reflection and runtime code modification) that are typically not available in traditional compiled languages.

            Java gained popularity shortly after its release, and has been a very popular programming language since then.[18] Java was the third most popular programming language in 2022 according to GitHub[19] and it is ranked fourth on TIOBE index as of October 2023.[20] Although still widely popular, there has been a gradual decline in use of Java in recent years with other languages using JVM gaining popularity.[21]
            
            Java was originally developed by James Gosling at Sun Microsystems. 
            It was released in May 1995 as a core component of Sun Microsystems' Java platform. 
            The original and reference implementation Java compilers, virtual machines, and class libraries were originally 
            released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the 
            Java Community Process, Sun had relicensed most of its Java technologies under the GPL-2.0-only license. 
            Oracle offers its own HotSpot Java Virtual Machine, however the official reference implementation is the 
            OpenJDK JVM which is free open-source software and used by most developers and is the default JVM for 
            almost all Linux distributions.Java is a high-level, class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible. It is a general-purpose programming language intended to let programmers write once, run anywhere (WORA),[16] meaning that compiled Java code can run on all platforms that support Java without the need to recompile.[17] Java applications are typically compiled to bytecode that can run on any Java virtual machine (JVM) regardless of the underlying computer architecture. The syntax of Java is similar to C and C++, but has fewer low-level facilities than either of them. The Java runtime provides dynamic capabilities (such as reflection and runtime code modification) that are typically not available in traditional compiled languages.

            Java gained popularity shortly after its release, and has been a very popular programming language since then.[18] Java was the third most popular programming language in 2022 according to GitHub[19] and it is ranked fourth on TIOBE index as of October 2023.[20] Although still widely popular, there has been a gradual decline in use of Java in recent years with other languages using JVM gaining popularity.[21]
            
            Java was originally developed by James Gosling at Sun Microsystems. It was released in May 1995 as a core component of Sun Microsystems' Java platform. The original and reference implementation Java compilers, virtual machines, and class libraries were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the Java Community Process, Sun had relicensed most of its Java technologies under the GPL-2.0-only license. Oracle offers its own HotSpot Java Virtual Machine, however the official reference implementation is the OpenJDK JVM which is free open-source software and used by most developers and is the default JVM for almost all Linux distributions.
            
            As of September 2023, Java 21 is the latest version, which is also a long-term support (LTS) version. Java 8, 11, and 17 are previous LTS versions still officially supported.
            
            History
            See also: Java (software platform) § History
            
            Duke, the Java mascot
            
            James Gosling, the creator of Java, in 2008
            
            The TIOBE programming language popularity index graph from 2002 to 2022. Java was steadily on the top from mid-2015 to early 2020.
            James Gosling, Mike Sheridan, and Patrick Naughton initiated the Java language project in June 1991.[22] Java was originally designed for interactive television, but it was too advanced for the digital cable television industry at the time.[23] The language was initially called Oak after an oak tree that stood outside Gosling's office. Later the project went by the name Green and was finally renamed Java, from Java coffee, a type of coffee from Indonesia.[24] Gosling designed Java with a C/C++-style syntax that system and application programmers would find familiar.[25]
            
            Sun Microsystems released the first public implementation as Java 1.0 in 1996.[26] It promised write once, run anywhere (WORA) functionality, providing no-cost run-times on popular platforms. Fairly secure and featuring configurable security, it allowed network- and file-access restrictions. Major web browsers soon incorporated the ability to run Java applets within web pages, and Java quickly became popular. The Java 1.0 compiler was re-written in Java by Arthur van Hoff to comply strictly with the Java 1.0 language specification.[27] With the advent of Java 2 (released initially as J2SE 1.2 in December 1998 – 1999), new versions had multiple configurations built for different types of platforms. J2EE included technologies and APIs for enterprise applications typically run in server environments, while J2ME featured APIs optimized for mobile applications. The desktop version was renamed J2SE. In 2006, for marketing purposes, Sun renamed new J2 versions as Java EE, Java ME, and Java SE, respectively.
            
            In 1997, Sun Microsystems approached the ISO/IEC JTC 1 standards body and later the Ecma International to formalize Java, but it soon withdrew from the process.[28][29][30] Java remains a de facto standard, controlled through the Java Community Process.[31] At one time, Sun made most of its Java implementations available without charge, despite their proprietary software status. Sun generated revenue from Java through the selling of licenses for specialized products such as the Java Enterprise System.
            
            On November 13, 2006, Sun released much of its Java virtual machine (JVM) as free and open-source software (FOSS), under the terms of the GPL-2.0-only license. On May 8, 2007, Sun finished the process, making all of its JVM's core code available under free software/open-source distribution terms, aside from a small portion of code to which Sun did not hold the copyright.[32]
            
            Sun's vice-president Rich Green said that Sun's ideal role with regard to Java was as an evangelist.[33] Following Oracle Corporation's acquisition of Sun Microsystems in 2009–10, Oracle has described itself as the steward of Java technology with a relentless commitment to fostering a community of participation and transparency.[34] This did not prevent Oracle from filing a lawsuit against Google shortly after that for using Java inside the Android SDK (see the Android section).
            
            On April 2, 2010, James Gosling resigned from Oracle.[35]
            
            </p>
    </div>
        <div class="thumbnail">
            <a href="https://www.youtube.com/results?search_query=java+playlist"><img src="https://source.unsplash.com/900x900/?coding,javalogo,javalanguage" alt= "javalogo image" class="imgFluid">
            </a>
    </div>
    </section>
    <section class="section ">
        <div class="paras">
        <p class="text-big">DAA</p>
        
        <p class="text-small">Design and analysis of algorithms is a crucial subject of computer science technology that deals with developing and studying efficient algorithms for fixing computational issues. It entails several steps, which includes problem formulation, algorithm layout, algorithm analysis, and algorithm optimization.

            The problem formulation process entails identifying the computational problem to be solved as well as specifying the input and output criteria. The algorithm design process entails creating a set of instructions that a computer can use to solve the problem. The algorithm analysis process entails determining the method's efficiency in terms of time and space complexity. Finally, the algorithm optimization process involves enhancing the method's efficiency by making changes to the design or implementation.
            
            There are several strategies for any algorithm's design and evaluation, including brute force algorithms, divide and conquer algorithms, dynamic programming, and greedy algorithms. Each method has its very own strengths and weaknesses, and the choice of approach depends on the nature of the problem being solved.
            
            Algorithm analysis is often performed by examining the algorithm's worst-case
             time and space complexity. The time complexity of an algorithm refers to the 
             amount of time it takes to clear up a problem as a characteristic of the input size.
              The space complexity of an algorithm refers to the quantity of memory required to solve a problem
               as a function of the enter length.
               DAA plc (styled "daa") (Irish: Údarás Aerfort Bhaile Átha Cliath cpt),[1] previously Dublin Airport Authority, is a commercial semi-state airport company in Ireland. The company owns and operates Dublin Airport and Cork Airport. Its other subsidiaries include the travel retail business Aer Rianta International[2] and DAA International.[3]

               DAA's head office is in the original passenger terminal on the grounds of Dublin Airport.
               
               DAA owned and operated Shannon Airport, until it became a separate state-owned airport in 2012. The company also owned Great Southern Hotels, which had nine sites throughout the island of Ireland. The hotels were sold in 2006.
               
               History
               Aer Rianta
               
               Aer Rianta logo until 2004.
               Aer Rianta was founded in 1937 as Aer Rianta Teoranta and the name is derived from the Irish language for "air ways" or "air tracks"; Teoranta is the Irish word for Limited. Aer Rianta was to serve as a holding company for the national airline and to promote aviation generally.
               
               In 1947, Aer Rianta started the duty-free shop concept in the Shannon Airport and are credited with the invention of duty-free shops in airports.[4] Aer Rianta was the principal shareholder of Aer Lingus during the airline's early days, until 1966.[5]
               
               Aer Rianta began managing the Dublin Airport in the 1940s.[5] Under the Air Navigation and Transport Act of 1950, Aer Rianta was given legal responsibility for the airport.[5] In 1954, Prof. Patrick Lynch was appointed chairman of Aer Rianta.[6] He retired from the position in 1975.[7]
               
               In 1966, the passage of the Air Companies Act enabled the transfer of Aer Lingus shares to the Minister of Finance, and separate boards were appointed to each company. A general manager of Aer Rianta was appointed in 1968. On 1 April 1969, Cork and Shannon Airports became the responsibility of the company.
               
               In 1988, Aer Rianta International (ARI) was created to pursue international potential to the company's growth not related to Irish airport management – for example, opening Russia's first duty free in Moscow in 1988. In 1998, Aer Rianta Teoranta became Aer Rianta cpt and kept this name until 2004.
               
               Dublin Airport Authority/DAA
               In 2004, the Oireachtas passed the State Airports Act, 2004. This changed the company name from Aer Rianta cpt to Dublin Airport Authority plc, and established Shannon Airport Authority plc and Cork Airport Authority plc. The three new authorities had power to formulate business plans for their respective airports, however they would not take charge of running the airports until a further date to be determined by the Minister for Transport, which by law could not be before 1 May 2005. As of 2008 this had yet to take place. Significant outstanding issues to be resolved include competitiveness and debit restructuring.
               
               The company also retains its significant shareholdings in foreign airports such as Düsseldorf and Larnaca, through its wholly owned subsidiary ARI, Aer Rianta International.
               
               The State Airports Act was heavily criticised by Noel Hanlon, the outgoing chairman of Aer Rianta, and by the company's unions, who believed it a precursor to privatisation. No act to privatise Dublin Airport Authority or any of the airports has been passed however.
               
               The Dublin Airport Authority was officially renamed DAA with effect from November 2014.[8]
               
               In 2016, DAA paid a €18.3m dividend to the State, its first since 2009.[9] In September 2017, Dalton Philips was appointed as its CEO.[10] In May 2018, Basil Geoghegan was named chairman of the company.[11] In January 2023, Kenny Jacobs was appointed as its CEO.[12]
               
               In 2019, DAA saw record-breaking passenger numbers.[13] The DAA was chosen for the Special Achievement in Geographic Information Systems (GIS) award ahead of 300,000 global candidates, using mapping software from GIS expert ESRI Ireland and working with the company to develop a new system to manage assets at the airport.[14]
               
               In 2020, Covid was “the most serious crisis that has ever faced the international aviation sector and our business,” according to then CEO Dalton Philips.[15] By June 2020, the pandemic had already cost DAA €160m in lost revenue, with passengers decreased by 99%. [15] The DAA implemented a series of public health measures to protect and enhance the health and safety of passengers and staff as a result of Covid-19. [16] In October 2020, Dublin Airport anti-Covid-19 measures received accreditation from global industry body Airports Council International (ACI).[17]
               
               DAA returned to profit in 2023.[18]
               
               Great Southern Hotels
               In 1990, the nine Great Southern Hotels were purchased from Córas Iompair Éireann, and sold again in 2006. Edward Holdings, a company controlled by Galway businessman Gerry Barrett bought the Killarney, Eyre Square and Corrib hotels, while Dublin developer Bernard McNamara has bought the Parknasilla hotel in County Kerry. A company controlled by Ronan McArdle, Frank McArdle, Alan McIntosh and the Walsh brothers has acquired the three airport hotels at Dublin, Cork and Shannon.[19]
               
               Airports and operations
               Dublin Airport
               Dublin Airport is the state's largest airport. It handled 31.5m passengers in 2018.[20] It had record-breaking passenger numbers in 2019.[13] Dublin Airport's connectivity increased by 59% in the five years to the end of 2018, making it the second-fastest growing major airport in Europe in terms of connectivity.[21] In October 2020, Dublin Airport anti-Covid-19 measures received accreditation from global industry body Airports Council International (ACI).[17]
               
               In 2022, Dublin Airport’s north runway came into operation . The runway cost €320 million, opening on time and on budget at no cost to the taxpayer.[22]
               
               A court case arose in 2014 regarding a proposed contract to be let by daa for a range of airport facilities services at Dublin Airport. OCS One Complete Solution, the incumbent contractor, challenged the daa's decision to award a new contract to Maybin Support Services Ltd., which led to a High Court hearing. Provisions under EU utilities procurement regulations, which include procurement in the transport sector, require an option for unsuccessful tenderers to be able to challenge an award decision if they have suitable grounds and provide for an automatic suspension of the new contract award process until the challenge has been resolved. This was the first occasion when the High Court ruled on a 
               request for this automatic suspension to be lifted. The court ruled in favour of leaving the suspension in place</p>
    </div>
        <div class="thumbnail">
            <a href="https://www.youtube.com/results?search_query=daa+playlist"><img src="https://source.unsplash.com/900x900/?coding,daalogo,daalanguage" alt= "daalogo" class="imgFluid">
            </a>
    </div>
    </section>

    <section class="section section-left">
        <div class="paras">
        <p class="text-big">DBMS</p>
        
        <p class="text-small">A database management system (DBMS) is a computer program (or more typically, a suite of them) designed to manage a database, a large set of structured data, and run operations on the data requested by numerous users. Typical examples of DBMS use include accounting, human resources and customer support systems.
            The database is a collection of inter-related data which is used to retrieve, insert and delete the data efficiently. It is also used to organize the data in the form of a table, schema, views, and reports, etc.
            A Database Management System (DBMS) is a software system that is designed to manage and organize data in a structured manner. It allows users to create, modify, and query a database, as well as manage the security and access controls for that database.
            A database is a collection of interrelated data which helps in the 
            efficient retrieval, insertion, and deletion of data from the database and 
            organizes the data in the form of tables, views, schemas, reports, etc. For Example, a university 
            database organizes the data about students, faculty, admin staff, etc. which helps in the efficient
             retrieval, insertion, and deletion of data from it.
             In computing, a database is an organized collection of data or a type of data store based on the use of a database management system (DBMS), the software that interacts with end users, applications, and the database itself to capture and analyze the data. The DBMS additionally encompasses the core facilities provided to administer the database. The sum total of the database, the DBMS and the associated applications can be referred to as a database system. Often the term "database" is also used loosely to refer to any of the DBMS, the database system or an application associated with the database.

Small databases can be stored on a file system, while large databases are hosted on computer clusters or cloud storage. The design of databases spans formal techniques and practical considerations, including data modeling, efficient data representation and storage, query languages, security and privacy of sensitive data, and distributed computing issues, including supporting concurrent access and fault tolerance.

Computer scientists may classify database management systems according to the database models that they support. Relational databases became dominant in the 1980s. These model data as rows and columns in a series of tables, and the vast majority use SQL for writing and querying data. In the 2000s, non-relational databases became popular, collectively referred to as NoSQL, because they use different query languages.

Terminology and overview
Formally, a "database" refers to a set of related data accessed through the use of a "database management system" (DBMS), which is an integrated set of computer software that allows users to interact with one or more databases and provides access to all of the data contained in the database (although restrictions may exist that limit access to particular data). The DBMS provides various functions that allow entry, storage and retrieval of large quantities of information and provides ways to manage how that information is organized.

Because of the close relationship between them, the term "database" is often used casually to refer to both a database and the DBMS used to manipulate it.

Outside the world of professional information technology, the term database is often used to refer to any collection of related data (such as a spreadsheet or a card index) as size and usage requirements typically necessitate use of a database management system.[1]

Existing DBMSs provide various functions that allow management of a database and its data which can be classified into four main functional groups:

Physically, database servers are dedicated computers that hold the actual databases and run only the DBMS and related software. Database servers are usually multiprocessor computers, with generous memory and RAID disk arrays used for stable storage. Hardware database accelerators, connected to one or more servers via a high-speed channel, are also used in large-volume transaction processing environments. DBMSs are found at the heart of most database applications. DBMSs may be built around a custom multitasking kernel with built-in networking support, but modern DBMSs typically rely on a standard operating system to provide these functions.[citation needed]

Since DBMSs comprise a significant market, computer and storage vendors often take into account DBMS requirements in their own development plans.[7]

Databases and DBMSs can be categorized according to the database model(s) that they support (such as relational or XML), the type(s) of computer they run on (from a server cluster to a mobile phone), the query language(s) used to access the database (such as SQL or XQuery), and their internal engineering, which affects performance, scalability, resilience, and security.

History
The sizes, capabilities, and performance of databases and their respective DBMSs have grown in orders of magnitude. These performance increases were enabled by the technology progress in the areas of processors, computer memory, computer storage, and computer networks. The concept of a database was made possible by the emergence of direct access storage media such as magnetic disks, which became widely available in the mid-1960s; earlier systems relied on sequential storage of data on magnetic tape. The subsequent development of database technology can be divided into three eras based on data model or structure: navigational,[8] SQL/relational, and post-relational.

The two main early navigational data models were the hierarchical model and the CODASYL model (network model). These were characterized by the use of pointers (often physical disk addresses) to follow relationships from one record to another.

The relational model, first proposed in 1970 by Edgar F. Codd, departed from this tradition by insisting that applications should search for data by content, rather than by following links. The relational model employs sets of ledger-style tables, each used for a different type of entity. Only in the mid-1980s did computing hardware become powerful enough to allow the wide deployment of relational systems (DBMSs plus applications). By the early 1990s, however, relational systems dominated in all large-scale data processing applications, and as of 2018 they remain dominant: IBM Db2, Oracle, MySQL, and Microsoft SQL Server are the most searched DBMS.[9] The dominant database language, standardized SQL for the relational model, has influenced database languages for other data models.[citation needed]

Object databases were developed in the 1980s to overcome the inconvenience of object–relational impedance mismatch, which led to the coining of the term "post-relational" and also the development of hybrid object–relational databases.

The next generation of post-relational databases in the late 2000s became known as NoSQL databases, introducing fast key–value stores and document-oriented databases. A competing "next generation" known as NewSQL databases attempted new implementations that retained the relational/SQL model while aiming to match the high performance of NoSQL compared to commercially available relational DBMSs.
        </p>
    </div>
        <div class="thumbnail">
            <a href="https://www.youtube.com/results?search_query=dbms"><img src="https://source.unsplash.com/900x900/?coding,dbmslogo,dbmslanguage" alt= "dbmslogo" class="imgFluid">
            </a>
    </div>
    </section>

    <section class="section ">
        <div class="paras">
        <p class="text-big">COMPUTER NETWORKS</p>
        
        <p class="text-small">A computer network is a set of computers sharing resources located on or provided by network nodes. Computers use common communication protocols over digital interconnections to communicate with each other. These interconnections are made up of telecommunication network technologies based on physically wired, optical, and wireless radio-frequency methods that may be arranged in a variety of network topologies.

            The nodes of a computer network can include personal computers, servers, networking hardware, or other specialized or general-purpose hosts. They are identified by network addresses and may have hostnames. Hostnames serve as memorable labels for the nodes and are rarely changed after initial assignment. Network addresses serve for locating and identifying the nodes by communication protocols such as the Internet Protocol.
            
            Computer networks may be classified by many criteria, including the transmission medium used to 
            carry signals, bandwidth, communications protocols to organize network traffic, the network size, the topology, 
            traffic control mechanisms, and organizational intent.
            Network packet

            Network Packet
            Most modern computer networks use protocols based on packet-mode transmission. A network packet is a formatted unit of data carried by a packet-switched network.
            
            Packets consist of two types of data: control information and user data (payload). The control information provides data the network needs to deliver the user data, for example, source and destination network addresses, error detection codes, and sequencing information. Typically, control information is found in packet headers and trailers, with payload data in between.
            
            With packets, the bandwidth of the transmission medium can be better shared among users than if the network were circuit switched. When one user is not sending packets, the link can be filled with packets from other users, and so the cost can be shared, with relatively little interference, provided the link is not overused. Often the route a packet needs to take through a network is not immediately available. In that case, the packet is queued and waits until a link is free.
            
            The physical link technologies of packet networks typically limit the size of packets to a certain maximum transmission unit (MTU). A longer message may be fragmented before it is transferred and once the packets arrive, they are reassembled to construct the original message.
            
            Network topology
            Further information: Network topology
            
            Common network topologies
            The physical or geographic locations of network nodes and links generally have relatively little effect on a network, but the topology of interconnections of a network can significantly affect its throughput and reliability. With many technologies, such as bus or star networks, a single failure can cause the network to fail entirely. In general, the more interconnections there are, the more robust the network is; but the more expensive it is to install. Therefore, most network diagrams are arranged by their network topology which is the map of logical interconnections of network hosts.
            
            Common topologies are:
            
            Bus network: all nodes are connected to a common medium along this medium. This was the layout used in the original Ethernet, called 10BASE5 and 10BASE2. This is still a common topology on the data link layer, although modern physical layer variants use point-to-point links instead, forming a star or a tree.
            Star network: all nodes are connected to a special central node. This is the typical layout found in a small switched Ethernet LAN, where each client connects to a central network switch, and logically in a wireless LAN, where each wireless client associates with the central wireless access point.
            Ring network: each node is connected to its left and right neighbor node, such that all nodes are connected and that each node can reach each other node by traversing nodes left- or rightwards. Token ring networks, and the Fiber Distributed Data Interface (FDDI), made use of such a topology.
            Mesh network: each node is connected to an arbitrary number of neighbors in such a way that there is at least one traversal from any node to any other.
            Fully connected network: each node is connected to every other node in the network.
            Tree network: nodes are arranged hierarchically. This is the natural topology for a larger Ethernet network with multiple switches and without redundant meshing.
            The physical layout of the nodes in a network may not necessarily reflect the network topology. As an example, with FDDI, the network topology is a ring, but the physical topology is often a star, because all neighboring connections can be routed via a central physical location. Physical layout is not completely irrelevant, however, as common ducting and equipment locations can represent single points of failure due to issues like fires, power failures and flooding.
            
            Overlay network
            
             The Internet itself was initially built as an overlay on the telephone network.[33] Even today, each Internet node can communicate with virtually any other through an underlying mesh of sub-networks of wildly different topologies and technologies. Address resolution and routing are the means that allow mapping of a fully connected IP overlay network to its underlying network.
            
            Another example of an overlay network is a distributed hash table, which maps keys to nodes in the network. In this case, the underlying network is an IP network, and the overlay network is a table (actually a map) indexed by keys.
            
            Overlay networks have also been proposed as a way to improve Internet routing, such as through quality of service guarantees achieve higher-quality streaming media. Previous proposals such as IntServ, DiffServ, and IP multicast have not seen wide acceptance largely because they require modification of all routers in the network.[citation needed] On the other hand, an overlay network can be incrementally deployed on end-hosts running the overlay protocol software, without cooperation from Internet service providers. The overlay network has no control over how packets are routed in the underlying network between two overlay nodes, but it can control, for example, the sequence of overlay nodes that a message traverses before it reaches its destination[citation needed].
            
            For example, Akamai Technologies manages an overlay network that provides reliable, efficient content delivery (a kind of multicast). Academic research includes end system multicast,[34] resilient routing and quality of service studies, among others.</p>
    </div>
        <div class="thumbnail">
            <a href="https://www.youtube.com/results?search_query=computer+networks"><img src="https://source.unsplash.com/900x900/?coding,computernetworkslogo,computernetworkslanguage" alt= "computernetworkslogo" class="imgFluid">
            </a>
    </div>
    </section>

    <section class="section section-left">
        <div class="paras">
        <p class="text-big">DISCRETE STRUCTURE</p>
        
        <p class="text-small">Computers are fundamentally digital machines. Everything is binary, either a 0 or a 1. This finite and discrete nature of computers links them deeply to discrete mathematics. Discrete mathematics is the study of mathematical structures that are somehow “discrete”. Discrete contrasts with “continuous”, as you know well from the real numbers 
            and calculus. Informally, discrete structures are ones which have a relationship to the natural numbers 
           
           In this course we will study the discrete mathematical foundations of computer science.
            This includes not only the discrete structures themselves, like sets, functions, relations,
             matrices, and graphs, but also the logical and algorithmic application of them to computing.
             This provides a clear, accessible introduction to discrete mathematics that combines theory with practicality. 
             Discrete mathematics describes processes that consist of a sequence of individual steps, 
             as compared to forms of mathematics that describe processes that change in a continuous manner. 
             The major topics we cover in this course are single-membership sets, mathematical logic, induction,
              and proofs. 
             We will also discuss counting theory, probability, recursion, graphs, trees, and finite-state machines.
             Discrete mathematics is the study of mathematical structures that can be considered "discrete" (in a way analogous to discrete variables, having a bijection with the set of natural numbers) rather than "continuous" (analogously to continuous functions). Objects studied in discrete mathematics include integers, graphs, and statements in logic.[1][2][3] By contrast, discrete mathematics excludes topics in "continuous mathematics" such as real numbers, calculus or Euclidean geometry. Discrete objects can often be enumerated by integers; more formally, discrete mathematics has been characterized as the branch of mathematics dealing with countable sets[4] (finite sets or sets with the same cardinality as the natural numbers). However, there is no exact definition of the term "discrete mathematics".[5]

             The set of objects studied in discrete mathematics can be finite or infinite. The term finite mathematics is sometimes applied to parts of the field of discrete mathematics that deals with finite sets, particularly those areas relevant to business.
             
             Research in discrete mathematics increased in the latter half of the twentieth century partly due to the development of digital computers which operate in "discrete" steps and store data in "discrete" bits. Concepts and notations from discrete mathematics are useful in studying and describing objects and problems in branches of computer science, such as computer algorithms, programming languages, cryptography, automated theorem proving, and software development. Conversely, computer implementations are significant in applying ideas from discrete mathematics to real-world problems.
             
             Although the main objects of study in discrete mathematics are discrete objects, analytic methods from "continuous" mathematics are often employed as well.
             
             In university curricula, discrete mathematics appeared in the 1980s, initially as a computer science support course; its contents were somewhat haphazard at the time. The curriculum has thereafter developed in conjunction with efforts by ACM and MAA into a course that is basically intended to develop mathematical maturity in first-year students; therefore, it is nowadays a prerequisite for mathematics majors in some universities as well.[6][7] Some high-school-level discrete mathematics textbooks have appeared as well.[8] At this level, discrete mathematics is sometimes seen as a preparatory course, like precalculus in this respect.[9]
             
             The Fulkerson Prize is awarded for outstanding papers in discrete mathematics.
             
             
           
        </p>
    </div>
        <div class="thumbnail">
            <a href="https://www.youtube.com/results?search_query=discrete+structures"><img src="https://source.unsplash.com/900x900/?coding,discretelogo,discretelanguage" alt= "discretelogo" class="imgFluid">
            </a>
    </div>
    </section>

    <section class="section ">
        <div class="paras">
        <p class="text-big">DSA</p>
        
        <p class="text-small">DSA is defined as a combination of two separate yet interrelated topics
             Data Structure and Algorithms. DSA is one of the most important skills that every computer science 
             student must have. It is often seen that people with good knowledge of these technologies 
            are better programmers than others and thus, crack the interviews of almost every tech giant.
            A data structure is defined as a particular way of storing and organizing data in our devices to 
            use the data efficiently and effectively. The main idea behind using data structures is to minimize the time 
            and space complexities.
             An efficient data structure takes minimum memory space and requires minimum time to execute the data.
             Data Structures are the programmatic way of storing data so that data can be used efficiently.
              Almost every enterprise application uses various types of data structures in one or the other way. This tutorial will give you a great understanding on Data Structures needed 
             to understand the complexity of enterprise level applications and need of algorithms, 
             and data structures.There are numerous types of data structures, generally built upon simpler primitive data types. Well known examples are:[12]

             An array is a number of elements in a specific order, typically all of the same type (depending on the language, individual elements may either all be forced to be the same type, or may be of almost any type). Elements are accessed using an integer index to specify which element is required. Typical implementations allocate contiguous memory words for the elements of arrays (but this is not always a necessity). Arrays may be fixed-length or resizable.
             A linked list (also just called list) is a linear collection of data elements of any type, called nodes, where each node has itself a value, and points to the next node in the linked list. The principal advantage of a linked list over an array is that values can always be efficiently inserted and removed without relocating the rest of the list. Certain other operations, such as random access to a certain element, are however slower on lists than on arrays.
             A record (also called tuple or struct) is an aggregate data structure. A record is a value that contains other values, typically in fixed number and sequence and typically indexed by names. The elements of records are usually called fields or members. In the context of object-oriented programming, records are known as plain old data structures to distinguish them from objects.[13]
             Hash tables, also known as hash maps, are data structures that provide fast retrieval of values based on keys. They use a hashing function to map keys to indexes in an array, allowing for constant-time access in the average case. Hash tables are commonly used in dictionaries, caches, and database indexing. However, hash collisions can occur, which can impact their performance. Techniques like chaining and open addressing are employed to handle collisions.
             Graphs are collections of nodes connected by edges, representing relationships between entities. Graphs can be used to model social networks, computer networks, and transportation networks, among other things. They consist of vertices (nodes) and edges (connections between nodes). Graphs can be directed or undirected, and they can have cycles or be acyclic. Graph traversal algorithms include breadth-first search and depth-first search.
             Stacks and queues are abstract data types that can be implemented using arrays or linked lists. A stack has two primary operations: push (adds an element to the top of the stack) and pop (removes the topmost element from the stack), that follow the Last In, First Out (LIFO) principle. Queues have two main operations: enqueue (adds an element to the rear of the queue) and dequeue (removes an element from the front of the queue) that follow the First In, First Out (FIFO) principle.
             Trees represent a hierarchical organization of elements. A tree consists of nodes connected by edges, with one node being the root and all other nodes forming subtrees. Trees are widely used in various algorithms and data storage scenarios. Binary trees (particularly heaps), AVL trees, and B-trees are some popular types of trees. They enable efficient and optimal searching, sorting, and hierarchical representation of data.
             A trie, also known as a prefix tree, is a specialized tree data structure used for the efficient retrieval of strings. Tries store characters of a string as nodes, with each edge representing a character. They are particularly useful in text processing scenarios like autocomplete, spell-checking, and dictionary implementations. Tries enable fast searching and prefix-based operations on strings.
             </p>
    </div>
        <div class="thumbnail">
            <a href="https://www.youtube.com/results?search_query=dsa"><img src="https://source.unsplash.com/900x900/?coding,dsalogo,dsalanguage" alt= "dsalogo" class="imgFluid">
            </a>
    </div>
    </section>
    
    <section class="section section-left">
        <div class="paras">
        <p class="text-big">PYTHON</p>
        
        <p class="text-small">Python is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation.[31]

            Python is dynamically typed and garbage-collected. It supports multiple programming paradigms, including structured (particularly procedural), object-oriented and functional programming. It is often described as a "batteries included" language due to its comprehensive standard library.[32][33]
            
            Guido van Rossum began working on Python in the late 1980s as a successor to the ABC programming language and first released it in 1991 as Python 0.9.0.[34] Python 2.0 was released in 2000. Python 3.0, released in 2008, was a major revision not completely backward-compatible with earlier versions. Python 2.7.18, released in 2020, was the last release of Python 2.[35]
            
            Python consistently ranks as one of the most popular programming languages.
            Expressions
Python's expressions include:

The +, -, and * operators for mathematical addition, subtraction, and multiplication are similar to other languages, but the behavior of division differs. There are two types of divisions in Python: floor division (or integer division) // and floating-point/division.[91] Python uses the ** operator for exponentiation.
Python uses the + operator for string concatenation. Python uses the * operator for duplicating a string a specified number of times.
The @ infix operator. It is intended to be used by libraries such as NumPy for matrix multiplication.[92][93]
The syntax :=, called the "walrus operator", was introduced in Python 3.8. It assigns values to variables as part of a larger expression.[94]
In Python, == compares by value. Python's is operator may be used to compare object identities (comparison by reference), and comparisons may be chained—for example, a <= b <= c.
Python uses and, or, and not as Boolean operators.
Python has a type of expression called a list comprehension, as well as a more general expression called a generator expression.[70]
Anonymous functions are implemented using lambda expressions; however, there may be only one expression in each body.
Conditional expressions are written as x if c else y[95] (different in order of operands from the c ? x : y operator common to many other languages).
Python makes a distinction between lists and tuples. Lists are written as [1, 2, 3], are mutable, and cannot be used as the keys of dictionaries (dictionary keys must be immutable in Python). Tuples, written as (1, 2, 3), are immutable and thus can be used as keys of dictionaries, provided all of the tuple's elements are immutable. The + operator can be used to concatenate two tuples, which does not directly modify their contents, but produces a new tuple containing the elements of both. Thus, given the variable t initially equal to (1, 2, 3), executing t = t + (4, 5) first evaluates t + (4, 5), which yields (1, 2, 3, 4, 5), which is then assigned back to t—thereby effectively "modifying the contents" of t while conforming to the immutable nature of tuple objects. Parentheses are optional for tuples in unambiguous contexts.[96]
Python features sequence unpacking where multiple expressions, each evaluating to anything that can be assigned (to a variable, writable property, etc.) are associated in an identical manner to that forming tuple literals—and, as a whole, are put on the left-hand side of the equal sign in an assignment statement. The statement expects an iterable object on the right-hand side of the equal sign that produces the same number of values as the provided writable expressions; when iterated through them, it assigns each of the produced values to the corresponding expression on the left.[97]
Python has a "string format" operator % that functions analogously to printf format strings in C—e.g. "spam=%s eggs=%d" % ("blah", 2) evaluates to "spam=blah eggs=2". In Python 2.6+ and 3+, this was supplemented by the format() method of the str class, e.g. "spam={0} eggs={1}".format("blah", 2). Python 3.6 added "f-strings": spam = "blah"; eggs = 2; f'spam={spam} eggs={eggs}'.[98]
Strings in Python can be concatenated by "adding" them (with the same operator as for adding integers and floats), e.g. "spam" + "eggs" returns "spameggs". If strings contain numbers, they are added as strings rather than integers, e.g. "2" + "2" returns "22".
Python has various string literals:
Delimited by single or double quote marks; unlike in Unix shells, Perl, and Perl-influenced languages, single and double quote marks work the same. Both use the backslash (\) as an escape character. String interpolation became available in Python 3.6 as "formatted string literals".[98]
Triple-quoted (beginning and ending with three single or double quote marks), which may span multiple lines and function like here documents in shells, Perl, and Ruby.
Raw string varieties, denoted by prefixing the string literal with r. Escape sequences are not interpreted; hence raw strings are useful where literal backslashes are common, such as regular expressions and Windows-style paths. (Compare "@-quoting" in C#.)
Python has array index and array slicing expressions in lists, denoted as a[key], a[start:stop] or a[start:stop:step]. Indexes are zero-based, and negative indexes are relative to the end. Slices take elements from the start index up to, but not including, the stop index. The third slice parameter called step or stride, allows elements to be skipped and reversed. Slice indexes may be omitted—for example, a[:] returns a copy of the entire list. Each element of a slice is a shallow copy.
In Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as Common Lisp, Scheme, or Ruby. This leads to duplicating some functionality. For example:

List comprehensions vs. for-loops
Conditional expressions vs. if blocks
The eval() vs. exec() built-in functions (in Python 2, exec is a statement); the former is for expressions, the latter is for statements
Statements cannot be a part of an expression—so list and other comprehensions or lambda expressions, 
all being expressions, cannot contain statements. A particular case is that an assignment statement such as a = 1 
cannot form part of the conditional expression of a conditional statement. This has the advantage of avoiding a 
classic C error of mistaking an assignment operator = for an equality operator == in conditions: if (c = 1) { ... } 
is syntactically valid (but probably unintended) C code, but if c = 1: ... causes a syntax error in Python.
           
           
        </p>
    </div>
        <div class="thumbnail">
            <a href="https://www.youtube.com/results?search_query=python"><img src="https://source.unsplash.com/900x900/?coding,pythonlogo,pythonlanguage" alt= "PYTHON" class="imgFluid">
            </a>
    </div>
    </section>

    <!-- <hr> -->
    <section class="contact" id="contact">
        <h1 class="text-center">
            Contact Us
        </h1>
        <!-- onsubmit="sendEmail(); reset(); return false;" -->
        <div class="form">
            <!-- <form  action="/send-email" method="POST"> -->
            <form action="/" method="post">
            <input class="form-input" type="text" name="name" id="name" placeholder="Enter Your Name" required>
            <input class="form-input" type="number" name="phone" id="phone" placeholder="Enter Your Phone" required>
            <input class="form-input" type="email" name="email" id="email" placeholder="Enter Your Email" required>
            <textarea class="form-input" name="text" id="text" cols="30" rows="10" placeholder="Ellaborate Your Concern" required></textarea>
            <!-- <button class="btnn btnn-sm btnn-dark" id="btnn" type="send">Send</button> -->
            <button class="btnn btnn-sm btnn-dark" type="submit">Send</button>
            <!-- <button class="btnn btnn-sm btnn-dark" id="btnn" type="reset">Reset</button> -->
        </form>
        </div>
    </section>
    <footer class="background">
        <div class="Contact-start">
            <!-- <div class="Contact-text">
              <p2 style="color: white;">
                <i class="bx bx-male-female py-5" style="padding-left: 5%; color: white;"></i> &nbsp;&nbsp;Teenu Joshi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <i class="bx bxl-whatsapp py-5" style="padding-left: 5%; color: white;"></i> &nbsp;&nbsp;7668246122&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <i class="bx bxl-gmail py-5 " style="padding-left: 5%; color: white;"></i> &nbsp;&nbsp;teenujoshi0304@gmail.com
              </p2>
            </div> -->
            <div class="icons">
              <a href="https://instagram.com/teenujoshi09?igshid=YmMyMTA2M2Y="><i class="bx bxl-instagram" style="font-size: 2rem;"></i></a>
              <a href="https://twitter.com/JoshiTeenu?t=VFYDGGHD91XZ9bmXvEdHvg&s=09"><i class="bx bxl-twitter" style="font-size: 2rem;"></i></a>
              <a href="https://www.linkedin.com/in/teenu-joshi-394990229"><i class="bx bxl-linkedin" style="font-size: 2rem;"></i></a>
              <a href="https://github.com/teenujoshi"><i class="bx bxl-github" style="font-size: 2rem;"></i></a>
              <a href="https://mail.google.com/mail/u/0/#inbox?compose=CllgCKCBkQvKTTtNmlfVPnPmrmXJFhMdDKCtwvJLnbHmNXWFLbKLxLBZpCPhJQtZNdnBWvZpklB"><i class="bx bxl-gmail" style="font-size: 2rem;"></i></a>
            </div>
          
        </div>
        <p class="text-footer">
        Copyright &copy:2027 www.Be-educate.com - All rights reserved
    </p>
    </footer>
    <script src="JS/resp.js"></script>
</body>
</html>




    